/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/SpotifyPlugin.ts
var SpotifyPlugin_exports = {};
__export(SpotifyPlugin_exports, {
  default: () => SpotifyPlugin
});
module.exports = __toCommonJS(SpotifyPlugin_exports);
var import_obsidian2 = require("obsidian");

// src/spotify.ts
var import_obsidian = require("obsidian");
var baseURL = "https://open.spotify.com";
async function getEmbed(songUrl) {
  const url = new URL("/oembed", baseURL);
  url.searchParams.set("url", songUrl);
  const response = await (0, import_obsidian.requestUrl)(url.toString());
  return response.json;
}

// src/SpotifyPlugin.ts
var SpotifyPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    this.registerMarkdownCodeBlockProcessor("spotify", (source, el, ctx) => this.handleSpotifyCodeBlock(source, el, ctx));
  }
  async handleSpotifyCodeBlock(source, el, ctx) {
    const { url } = (0, import_obsidian2.parseYaml)(source);
    const embed = await getEmbed(url);
    const div = document.createElement("div");
    div.classList.add("obsidian-spotify");
    div.innerHTML = embed.html;
    el.appendChild(div);
  }
};
